@Ecore(nsPrefix="system", nsURI="https://migueljimenez.co/rcose/system/qos")
@GenModel(
	bundleManifest="false",
	modelDirectory="co.migueljimenez.rcose.system/src/main/java-gen",
	complianceLevel="8.0"
)
package co.migueljimenez.rcose.system.qos

import co.migueljimenez.rcose.system.types.ValueType
import co.migueljimenez.rcose.system.types.Function
import co.migueljimenez.rcose.system.types.Number
import java.time.Period
import java.time.Duration
import co.migueljimenez.rcose.system.software.Resource

type Period wraps Period

type Duration wraps Duration

enum Direction {
	INCREASING,
	DECREASING
}

abstract class Unit {
	String name
	String abbreviation
}

class BasicUnit extends Unit {
}

class DerivedUnit extends Unit {
	Double factor
	Boolean inverse
	refers Unit unit
}

class QoSObject {
}

class QoSCategory {
	String name
	refers QoSCategory parent
}

abstract class QoSAttribute extends QoSObject {
	String name
	String description
	refers QoSCategory[] categories
	refers QoSMetric<?>[] metrics
}

class AtomicAttribute extends QoSAttribute {
}

class CompositeAttribute extends QoSAttribute {
	refers AtomicAttribute[] components
}

abstract class QoSMetric<T extends Resource> extends QoSObject {
	String name
	String description
	Double weight
	refers T resourceType
	refers ValueType ^type
}

class CompositeMetric<T extends Resource> extends QoSMetric<T> {
	refers QoSMetric<T>[] components
	refers Function<Number, Number> evaluation
}

class DynamicMetric<T extends Resource> extends QoSMetric<T> {
	refers Window window
}

class MonotonicMetric<T extends Resource> extends QoSMetric<T> {
	Direction direction
}

class StaticMetric<T extends Resource> extends QoSMetric<T> {
}

abstract class Window {
}

class CalendarWindow extends Window {
	Period period
}

class SlidingWindow extends Window {
	Duration duration
}

class ExpandingWindow extends Window {
}
